{
  "name": "Less curse",
  "tagline": "Simple terminal-based UIs for ruby scripts - maybe, someday.",
  "body": "# LessCurse\r\n\r\nSimple terminal-based ncurses UIs.\r\n\r\nLessCurse is a work-in-progress, but it's unclear how much work and how much progress will happen/is needed.\r\n\r\nIt will probably just be developed enough to serve as a dead-simple TUI for the trackt time-tracking system.\r\n\r\nIm happy about bug reports and ideas, but chances are high that I cannot react in the way I wish others would do.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'lesscurse'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install lesscurse\r\n\r\n## Usage\r\n\r\nSee the examples folder for now.\r\nIt boils down to initialize a screen, populate it with widgets and create lambdas for events or keypresses.\r\n\r\n## Concepts\r\n\r\n### Screen\r\n\r\nThere is only one screen and it will fill up your terminal.  Access this screen via `LessCurse::screen` (or `LessCurse.screen`).\r\n\r\nThe screen can and should be populated by widgets.  No complex layouts are possible (yet).\r\n\r\nAlways one widget is focused.\r\n\r\nThe screen can handle global keyboard input (shortcuts).  Currently, the TAB key is used to switch the focus of widgets.  CTRL_Q will quit the application.\r\n\r\n### Widgets\r\n\r\nAll (three) widgets inherit from `LessCurse::Widgets::Base` and provide following methods:\r\n\r\n  - `new(title: \"Shows on top\", data: \"Shows somewhere\")` [creates instance]\r\n  - `set_default_actions` [populates the @action map (keys to lambdas)]\r\n  - `refresh` [(re)draws the widget]\r\n  - `handle_input(key)` [deals with input, that will be handed on from main module if focused]\r\n    has to return true if key press was dealt with\r\n\r\nThe default look of a widget has a box drawn around it, with an optional title at the top.\r\n\r\n#### List\r\n\r\nShows a list where an item can be selected.\r\n\r\n#### TextView\r\n\r\nShows text.\r\n\r\n#### TextArea\r\n\r\nAllows creepy text input.\r\n\r\n## Development\r\n\r\nAfter checking out the repo, run `bundle` to install dependencies. You can also run `bundle console` for an interactive prompt that will allow you to experiment.\r\n\r\nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release`, which will create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).\r\n\r\n### Design goals and decisions\r\n\r\nLessCurse aims to solve a specific problem and the library user (me) should be able to hack a UI with ease and without caring too much about configuration.\r\n\r\nThus, LessCurse is **very** oppinionated.\r\n\r\n  - No complex layouts, only screen-tiling.\r\n  - Few options.\r\n  - No way to get lost in visual design decisions.\r\n\r\nWidgets are for now not directly aware of the underlying (ncurses) window, this is a design decision workaround and yet on purpose.\r\n\r\n## Contributing\r\n\r\nBug reports and pull requests are welcome on GitHub at https://github.com/econya/less_curse.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}